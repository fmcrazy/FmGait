import glob
import os.path as osp
import re
import os
import json
from ..utils.data import BaseImageDataset



class CASIA_B(BaseImageDataset):

    """DukeMTMC-reID.
    Reference:
        - Ristani et al. Performance Measures and a Data Set for Multi-Target,
            Multi-Camera Tracking. ECCVW 2016.
        - Zheng et al. Unlabeled Samples Generated by GAN Improve the Person
            Re-identification Baseline in vitro. ICCV 2017.
    URL: `<https://github.com/layumi/DukeMTMC-reID_evaluation>`_

    Dataset statistics:
        - identities: 1404 (train + query).
        - images:16522 (train) + 2228 (query) + 17661 (gallery).
        - cameras: 8.
    """

    dataset_dir = "CASIA-B-pkl"
    # root = "/code/lxl/Gaitdata"

    def __init__(self, root, verbose=True):
        super(CASIA_B, self).__init__()
        self.root = osp.abspath(osp.expanduser(root))
        self.dataset_dir = osp.join(self.root, self.dataset_dir)

        train = process_dir(self.dataset_dir, training=True, gallery=False)
        query = process_dir(self.dataset_dir, training=False, gallery=False)
        gallery = process_dir(self.dataset_dir, training=False, gallery=True)

        self.train = train
        self.query = query
        self.gallery = gallery


    def _check_before_run(self):
        """Check if all files are available before going deeper"""
        if not osp.exists(self.dataset_dir):
            raise RuntimeError("'{}' is not available".format(self.dataset_dir))


def process_dir(dir_path, training, gallery):
    with open("../datasets/CASIA-B/CASIA-B.json", "rb") as f:
        partition = json.load(f)
    train_set = partition["TRAIN_SET"]
    test_set = partition["TEST_SET"]
    label_list = os.listdir(dir_path)
    train_set = [label for label in train_set if label in label_list]
    test_set = [label for label in test_set if label in label_list]
    if training:
        data = get_seqs_info_list_train(dir_path, train_set)
    else:
        data = get_seqs_info_list_test(dir_path, test_set, gallery)

    return data

def get_seqs_info_list_train(dir_path, label_set):
    seqs_info_list = []
    for lab in label_set:
        for typ in sorted(os.listdir(osp.join(dir_path, lab))):
            for vie in sorted(os.listdir(osp.join(dir_path, lab, typ))):
                seq_info = [lab, typ, vie]
                seq_path = osp.join(dir_path, *seq_info)
                seq_dirs = sorted(os.listdir(seq_path))
                if seq_dirs != []:
                    seq_dirs = [osp.join(seq_path, dir)
                                for dir in seq_dirs]
                    seqs_info_list.append([*seq_info, seq_dirs])
    return seqs_info_list

def get_seqs_info_list_test(dir_path, label_set, gallery=True):
    gallery_list = [['nm-01', 'nm-02', 'nm-03', 'nm-04'], ['nm-05', 'nm-06', 'bg-01', 'bg-02', 'cl-01', 'cl-02']]
    seqs_info_list = []
    for lab in label_set:
        typ_list = sorted(os.listdir(osp.join(dir_path, lab)))
        if gallery:
            typ_list = [i for i in gallery_list[0]]
        else:
            typ_list = [i for i in gallery_list[1]]
        for typ in typ_list:
            for vie in sorted(os.listdir(osp.join(dir_path, lab, typ))):
                seq_info = [lab, typ, vie]
                seq_path = osp.join(dir_path, *seq_info)
                seq_dirs = sorted(os.listdir(seq_path))
                if seq_dirs != []:
                    seq_dirs = [osp.join(seq_path, dir)
                                for dir in seq_dirs]
                    seqs_info_list.append([*seq_info, seq_dirs])
    return seqs_info_list

